Apuntes gnl:
cc get_next_line.c get_next_line_utils.c
time -v valgrind ./a.out | cat -e -n
https://github.com/Tripouille/gnlTester

get_next_line -> llama a una linea de archivo fd cada vez que se llama.
En ln, almacenamos la linea leida.
Estática, almacenara str entre llamadas
#Comprobación de fd y del buffer size
Llamada a read, lee desde el fd y lo concatenaria a str
Si str es null,  error de lectura o fin de archivo?
Se llama a line, que extrae la siguiente linea buscando \n en str y retorna una nueva cadena que contiene esa linea ?
llamada a nextstr, actualiza str, elimina la que acaba de ser extraida y mueve el puntuero de str a la siguiente depues de \n
Por ultimo retorna la linea leida

ft_read
Crea el buufer char para almacenar los datos
El int bytes para saber cuantos se leen por llamada
Asigna memoria para el buffer y el caracter nulo que se añade al final
POr que inicializa bytes a 1
Continua mientras queden bytes por leer o no encunetre una nueva linea
Llama a read hasta el tamaño del buffer size, y los alamacena en bff
Por que bytes menos 1 ?
Concatena con strjoin str y bff

size_t	ft_strlen(char *s)
Recorremos la funcion

char	*ft_strchr(char *s, int c)
Buscamos un caracter en la cadena, y retornamos el puntero a ese caracter

char	*ft_strjoin(char *org_str, char *bff)
Si no existe la cadena original, añadimos un caracter nulo.
Copiamos cada caracter de la original a la str.
Añadimos el buffer.
Añadimos el nulo.

char	*ft_line(char *str)
Se copian los caracteres hasta encontrar la nueva linea o ahsta que deje de existir str
Se agrega el nulo y la nueva linea si se encuentra.

char	*ft_nextstr(char *str)

1-CAMBIO DE NOMBRE DE LAS FUNCIONES
2-CAMBIO DE NOMBRES EN LAS VARIABLES
3-EXTRACCIÓN DE NUEVAS FUNCIONES
4-CAMBIAR LA FORMA EN LA QUE SE EXPRESAN CONDICIONES
